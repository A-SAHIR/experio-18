version: '3.7'
services:
  postgres:
    image: postgres:11
    networks:
      - net
    volumes:
      - ${FOLDER_PATH}/data/postgres:/var/lib/postgresql/data
    command: postgres -c max_connections=${POSTGRES_MAX_CONNECTIONS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  odoo:
    image: myregistry.experioservices.com/experio:pre-6.10.2
    networks:
      - nginx-network
      - net
    tty: true
    depends_on:
      - postgres
    deploy:
      replicas: 4
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
    ports:
      - "${ODOO_PORT}:8069"
    volumes:
      - ${FOLDER_PATH}/odoo.conf:/etc/odoo/odoo.conf
      - ${FOLDER_PATH}/data/odoo:/var/lib/odoo

  odoo-bot:
    image: myregistry.experioservices.com/experio:pre-6.10.2
    command: python3 /mnt/scripts/azure_upgrade.py
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - COMMAND=${COMMAND}
      - MODULES=${MODULES}
      - DBNAME=${DBNAME}
      - OPTION=${OPTION}
      - TIMEOUT=${TIMEOUT}
    networks:
      - net
    volumes:
      - ${FOLDER_PATH}/odoo.conf:/etc/odoo/odoo.conf
    deploy:
      restart_policy:
        condition: none

networks:
  nginx-network:
    external: true
  net:
